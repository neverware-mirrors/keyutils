From: Christian Kastner <ckk@kvr.at>
Date: Tue, 1 Sep 2015 21:05:46 +0200
Subject: Disable tests hitting bug in MIPS kernel < 3.19

A bug in the kernel-internal strnlen() function on MIPS led to the situation of
overlong strings not being reported correctly. This was fixed by the following
commit in 3.19:

	commit	0097761013253930341e23723d64e0845c3f9edd (patch)
	Author: Ralf Baechle <ralf@linux-mips.org>
	Date: Date: Tue, 4 Nov 2014 11:54:29 +0100
	Subject: MIPS: Fix strnlen_user() return value in case of overlong strings.

This patch disables the problematic tests on MIPS kernels older than 3.19.

Last-Update: 2015-09-01
---
 tests/keyctl/add/bad-args/runtest.sh        | 15 +++++++++++----
 tests/keyctl/newring/bad-args/runtest.sh    | 15 +++++++++++----
 tests/keyctl/padd/bad-args/runtest.sh       | 15 +++++++++++----
 tests/keyctl/requesting/bad-args/runtest.sh | 15 +++++++++++----
 tests/keyctl/session/bad-args/runtest.sh    | 15 +++++++++++----
 5 files changed, 55 insertions(+), 20 deletions(-)

diff --git a/tests/keyctl/add/bad-args/runtest.sh b/tests/keyctl/add/bad-args/runtest.sh
index 8419fbc..bd14d1f 100644
--- a/tests/keyctl/add/bad-args/runtest.sh
+++ b/tests/keyctl/add/bad-args/runtest.sh
@@ -51,11 +51,18 @@ else
     expect_error EDQUOT
 fi
 
-# check that an overlong key description fails correctly (>4095 inc NUL)
-marker "CHECK OVERLONG DESC"
-create_key --fail user a$maxdesc stuff @p
+# This doesn't work on MIPS earler than 3.19 because of a kernel bug
+kver=`uname -r`
+kmch=`uname -m`
+if ! version_less_than "$kver" 3.19 ||
+	[ "$kmch" != "mips" -a "$kmch" != "mips64" ]
+then
+	# check that an overlong key description fails correctly (>4095 inc NUL)
+	marker "CHECK OVERLONG DESC"
+	create_key --fail user a$maxdesc stuff @p
 
-expect_error EINVAL
+	expect_error EINVAL
+fi
 
 # check that a bad key ID fails correctly
 marker "CHECK BAD KEY ID"
diff --git a/tests/keyctl/newring/bad-args/runtest.sh b/tests/keyctl/newring/bad-args/runtest.sh
index 54655c3..de9aafd 100644
--- a/tests/keyctl/newring/bad-args/runtest.sh
+++ b/tests/keyctl/newring/bad-args/runtest.sh
@@ -21,10 +21,17 @@ else
     expect_error EDQUOT
 fi
 
-# check that an overlong key description fails correctly (>4095 inc NUL)
-marker "CHECK OVERLONG DESC"
-create_keyring --fail a$maxdesc @p
-expect_error EINVAL
+# This doesn't work on MIPS earler than 3.19 because of a kernel bug
+kver=`uname -r`
+kmch=`uname -m`
+if ! version_less_than "$kver" 3.19 ||
+	[ "$kmch" != "mips" -a "$kmch" != "mips64" ]
+then
+	# check that an overlong key description fails correctly (>4095 inc NUL)
+	marker "CHECK OVERLONG DESC"
+	create_keyring --fail a$maxdesc @p
+	expect_error EINVAL
+fi
 
 # check that an empty keyring name fails
 marker "CHECK EMPTY KEYRING NAME"
diff --git a/tests/keyctl/padd/bad-args/runtest.sh b/tests/keyctl/padd/bad-args/runtest.sh
index a13e8db..ed93959 100644
--- a/tests/keyctl/padd/bad-args/runtest.sh
+++ b/tests/keyctl/padd/bad-args/runtest.sh
@@ -51,10 +51,17 @@ else
     expect_error EDQUOT
 fi
 
-# check that an overlong key description fails correctly (>4095 inc NUL)
-marker "CHECK OVERLONG DESC"
-pcreate_key --fail stuff user a$maxdesc @p
-expect_error EINVAL
+# This doesn't work on MIPS earler than 3.19 because of a kernel bug
+kver=`uname -r`
+kmch=`uname -m`
+if ! version_less_than "$kver" 3.19 ||
+	[ "$kmch" != "mips" -a "$kmch" != "mips64" ]
+then
+	# check that an overlong key description fails correctly (>4095 inc NUL)
+	marker "CHECK OVERLONG DESC"
+	pcreate_key --fail stuff user a$maxdesc @p
+	expect_error EINVAL
+fi
 
 # check that a bad key ID fails correctly
 marker "CHECK BAD KEY ID"
diff --git a/tests/keyctl/requesting/bad-args/runtest.sh b/tests/keyctl/requesting/bad-args/runtest.sh
index f460a9b..9934a95 100644
--- a/tests/keyctl/requesting/bad-args/runtest.sh
+++ b/tests/keyctl/requesting/bad-args/runtest.sh
@@ -91,10 +91,17 @@ marker "CHECK MAXLEN DESC"
 request_key --fail user $maxdesc
 expect_error ENOKEY
 
-# check that an overlong key description fails correctly
-marker "CHECK OVERLONG DESC"
-request_key --fail user a$maxdesc
-expect_error EINVAL
+# This doesn't work on MIPS earler than 3.19 because of a kernel bug
+kver=`uname -r`
+kmch=`uname -m`
+if ! version_less_than "$kver" 3.19 ||
+	[ "$kmch" != "mips" -a "$kmch" != "mips64" ]
+then
+	# check that an overlong key description fails correctly
+	marker "CHECK OVERLONG DESC"
+	request_key --fail user a$maxdesc
+	expect_error EINVAL
+fi
 
 # check that a max length callout info works correctly
 marker "CHECK MAXLEN CALLOUT"
diff --git a/tests/keyctl/session/bad-args/runtest.sh b/tests/keyctl/session/bad-args/runtest.sh
index e3b6f71..af69797 100644
--- a/tests/keyctl/session/bad-args/runtest.sh
+++ b/tests/keyctl/session/bad-args/runtest.sh
@@ -14,10 +14,17 @@ marker "SESSION WITH EMPTY KEYRING NAME"
 new_session --fail ""
 expect_error EINVAL
 
-# check that an overlong keyring name fails correctly
-marker "SESSION WITH OVERLONG KEYRING NAME"
-new_session --fail a$maxdesc
-expect_error EINVAL
+# This doesn't work on MIPS earler than 3.19 because of a kernel bug
+kver=`uname -r`
+kmch=`uname -m`
+if ! version_less_than "$kver" 3.19 ||
+	[ "$kmch" != "mips" -a "$kmch" != "mips64" ]
+then
+	# check that an overlong keyring name fails correctly
+	marker "SESSION WITH OVERLONG KEYRING NAME"
+	new_session --fail a$maxdesc
+	expect_error EINVAL
+fi
 
 echo "++++ FINISHED TEST: $result" >>$OUTPUTFILE
 
